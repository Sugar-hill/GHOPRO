/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface LendingPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "createLoan"
      | "liquidateLoan"
      | "loanCounter"
      | "loans"
      | "oracle"
      | "repayLoan"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "LoanCreated" | "LoanLiquidated" | "LoanRepaid"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createLoan",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateLoan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "loanCounter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "loans", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "repayLoan",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loanCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "loans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repayLoan", data: BytesLike): Result;
}

export namespace LoanCreatedEvent {
  export type InputTuple = [
    loanId: BigNumberish,
    borrower: AddressLike,
    amount: BigNumberish,
    collateral: BigNumberish
  ];
  export type OutputTuple = [
    loanId: bigint,
    borrower: string,
    amount: bigint,
    collateral: bigint
  ];
  export interface OutputObject {
    loanId: bigint;
    borrower: string;
    amount: bigint;
    collateral: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LoanLiquidatedEvent {
  export type InputTuple = [loanId: BigNumberish];
  export type OutputTuple = [loanId: bigint];
  export interface OutputObject {
    loanId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LoanRepaidEvent {
  export type InputTuple = [loanId: BigNumberish];
  export type OutputTuple = [loanId: bigint];
  export interface OutputObject {
    loanId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LendingPool extends BaseContract {
  connect(runner?: ContractRunner | null): LendingPool;
  waitForDeployment(): Promise<this>;

  interface: LendingPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  createLoan: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, collateral: BigNumberish],
    [void],
    "nonpayable"
  >;

  liquidateLoan: TypedContractMethod<
    [loanId: BigNumberish],
    [void],
    "nonpayable"
  >;

  loanCounter: TypedContractMethod<[], [bigint], "view">;

  loans: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, boolean] & {
        borrower: string;
        token: string;
        amount: bigint;
        collateral: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  oracle: TypedContractMethod<[], [string], "view">;

  repayLoan: TypedContractMethod<[loanId: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createLoan"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, collateral: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "liquidateLoan"
  ): TypedContractMethod<[loanId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "loanCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "loans"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, boolean] & {
        borrower: string;
        token: string;
        amount: bigint;
        collateral: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "oracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "repayLoan"
  ): TypedContractMethod<[loanId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "LoanCreated"
  ): TypedContractEvent<
    LoanCreatedEvent.InputTuple,
    LoanCreatedEvent.OutputTuple,
    LoanCreatedEvent.OutputObject
  >;
  getEvent(
    key: "LoanLiquidated"
  ): TypedContractEvent<
    LoanLiquidatedEvent.InputTuple,
    LoanLiquidatedEvent.OutputTuple,
    LoanLiquidatedEvent.OutputObject
  >;
  getEvent(
    key: "LoanRepaid"
  ): TypedContractEvent<
    LoanRepaidEvent.InputTuple,
    LoanRepaidEvent.OutputTuple,
    LoanRepaidEvent.OutputObject
  >;

  filters: {
    "LoanCreated(uint256,address,uint256,uint256)": TypedContractEvent<
      LoanCreatedEvent.InputTuple,
      LoanCreatedEvent.OutputTuple,
      LoanCreatedEvent.OutputObject
    >;
    LoanCreated: TypedContractEvent<
      LoanCreatedEvent.InputTuple,
      LoanCreatedEvent.OutputTuple,
      LoanCreatedEvent.OutputObject
    >;

    "LoanLiquidated(uint256)": TypedContractEvent<
      LoanLiquidatedEvent.InputTuple,
      LoanLiquidatedEvent.OutputTuple,
      LoanLiquidatedEvent.OutputObject
    >;
    LoanLiquidated: TypedContractEvent<
      LoanLiquidatedEvent.InputTuple,
      LoanLiquidatedEvent.OutputTuple,
      LoanLiquidatedEvent.OutputObject
    >;

    "LoanRepaid(uint256)": TypedContractEvent<
      LoanRepaidEvent.InputTuple,
      LoanRepaidEvent.OutputTuple,
      LoanRepaidEvent.OutputObject
    >;
    LoanRepaid: TypedContractEvent<
      LoanRepaidEvent.InputTuple,
      LoanRepaidEvent.OutputTuple,
      LoanRepaidEvent.OutputObject
    >;
  };
}
